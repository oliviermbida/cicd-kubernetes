# maintainer="Olivier Mbida <oliver.mbida@ai-uavsystems.com>"
version: 2.1

parameters:
  run_build_app:
    type: boolean
    default: true
  run_deploy_infrastructure:
    type: boolean
    default: false  

commands:
# Useful if you don't want to re-run deploy-infrastructure which takes a while.
  check_job:
    description: Stop job if false  
    parameters:
      start_job:
        type: boolean
        default: true        
    steps: 
      - when:
          condition: 
            not: << parameters.start_job >>
          steps:
            - run: circleci-agent step halt
# # Similar to [skip ci] or [ci skip] in commit message
  cancel-workflow:
    description: Check commit message if Circleci build
    steps: 
      - checkout
      - run:
          name: Trigger builds if Circleci
          command: |
            commit_message=$(git log -1 HEAD --pretty=format:%s)
            if [[ $commit_message == *Circleci* ]]; then
              echo "---Circleci CI pipeline---"
            else
              echo "Cancelling workflow ${CIRCLE_WORKFLOW_ID}"
              curl --request POST \
                --url https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel \
                --header "Circle-Token: ${CIRCLE_TOKEN_API}"     
            fi
# AWS CLI v2           
# Could use the Orb circleci/aws-cli@3.1.1
# Best to know which commands are executed if you are security aware
# You also reduce the overheads of a generic Orb
  install_aws:
    description: Install the AWS CLI via Pip if not already installed.
    parameters:
      binary-dir:
        default: /usr/local/bin
        description: >
          The main aws program in the install directory is symbolically linked to
          the file aws in the specified path. Defaults to /usr/local/bin
        type: string
      install-dir:
        default: /usr/local/aws-cli
        description: >
          Specify the installation directory of AWS CLI. Defaults to
          /usr/local/aws-cli
        type: string
    steps:
      - run:
          command: |
            curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip" -o "awscliv2.zip"
            unzip -q -o awscliv2.zip
            sudo ./aws/install -i "${PARAM_AWS_CLI_INSTALL_DIR}" -b "${PARAM_AWS_CLI_BINARY_DIR}"
            rm -r awscliv2.zip ./aws
            aws --version
          environment:
            PARAM_AWS_CLI_BINARY_DIR: <<parameters.binary-dir>>
            PARAM_AWS_CLI_INSTALL_DIR: <<parameters.install-dir>>
          name: Install AWS CLI v2
  configure_aws:
    description: >
      configure aws credentials
    parameters:
      access_key_id: 
        type: string
        description: AWS access key Id
        default: $AWS_USER_ACCESS_KEY_ID
      secret_access_key: 
        type: string
        description: AWS secret access key
        default: $AWS_USER_SECRET_ACCESS_KEY
      region: 
        type: string
        description: AWS default region
        default: $AWS_DEFAULT_REGION
    steps: 
      - run:
          name: Configure aws 
          command: |
            # AWS CLI supported environment variables
            AWS_ACCESS_KEY_ID=$(eval echo "$PARAM_AWS_CLI_ACCESS_KEY_ID")
            AWS_SECRET_ACCESS_KEY=$(eval echo "$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
            AWS_DEFAULT_REGION=$(eval echo "$PARAM_AWS_CLI_REGION")
            # configure aws for this job
            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID" 
            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" 
            # cleanup
            unset AWS_ACCESS_KEY_ID
            unset AWS_USER_SECRET_ACCESS_KEY
          environment:
            PARAM_AWS_CLI_ACCESS_KEY_ID: <<parameters.access_key_id>>
            PARAM_AWS_CLI_REGION: <<parameters.region>>
            PARAM_AWS_CLI_SECRET_ACCESS_KEY: <<parameters.secret_access_key>>

# 
jobs:
  # https://circleci.com/docs/building-docker-images          
  build-app:
    # docker:
    #   - image: cimg/base:2020.05  
    # # machine: true
    # resource_class: $CIRCLECI_RESOURCE_CLASS  
    # # docker:
    # #   - image: cimg/base:2020.05 
    machine:
      image: ubuntu-2204:2022.04.2    
    steps:
      # - setup_remote_docker:
      #     version: 20.10.14  
      - check_job:
          start_job: <<pipeline.parameters.run_build_app>>
      # - install_aws
      - configure_aws:
          access_key_id: $AWS_USER_ACCESS_KEY_ID
          secret_access_key: $AWS_USER_SECRET_ACCESS_KEY
      - checkout
      - run:
          name: install dependencies
          command: |
            sudo apt-get update 
            sudo apt install -y jq
            sudo apt-get install -y docker-compose-plugin
            npm install snyk -g
      - run:
          name: install linter
          command: |
            make setup
            make install          
      - run:
          name: run lint
          command: |
            . ~/.devops/bin/activate
            make lint    
      - run:
          name: Build app
          command: |
            # Get dockerhub credentials from aws secretsmanager
            DOCKERHUB_USERNAME=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."username")
            DOCKERHUB_PASSWORD=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."password") 
            printf "%s/%s:%s" "${DOCKERHUB_USERNAME}" "notebook" "${WORKFLOW_ID}" > /tmp/docker_tag.out
            dockerpath=$(cat /tmp/docker_tag.out)
            echo "Docker ID and Image: $dockerpath"
            docker build --tag "$dockerpath" .
            docker image ls
      - run:
          name: Scan app
          command: |
            # Get dockerhub credentials from aws secretsmanager
            DOCKERHUB_USERNAME=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."username")
            DOCKERHUB_PASSWORD=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."password") 
            echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin 
            dockerpath=$(cat /tmp/docker_tag.out)
            # "true" to fix Bug exit code 141 even though scan passed.
            # remove to get updated scan
            yes Y | docker scan $dockerpath || true
      - run:
          name: Test app
          command: |
            dockerpath=$(cat /tmp/docker_tag.out)
            export $dockerpath
            docker compose run notebook npm test              
      - run:
          name: Push app to dockerhub
          command: |
            # Get dockerhub credentials from aws secretsmanager
            DOCKERHUB_USERNAME=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."username")
            DOCKERHUB_PASSWORD=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."password") 
            dockerpath=$(cat /tmp/docker_tag.out)
            echo "Docker ID and Image: $dockerpath"
            echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin 
            docker push "$dockerpath"             
      - run:
          name: Cleanup docker config
          when: on_fail
          command: |
            # WARNING! Your password will be stored unencrypted in ~/.docker/config.json.
            # Rotate dockerhub and AWS ECR credentials
            # To reduce security risk configure docker credential store before login
            # https://docs.docker.com/engine/reference/commandline/login/#credentials-store
            if [ -f ~/.docker/config.json ]; then
              rm -rf ~/.docker/config.json
            fi
      - run:
          name: Cleanup aws config
          when: on_fail
          command: |
            # cleanup
            rm -f $AWS_SHARED_CREDENTIALS_FILE
            rm -f $AWS_CONFIG_FILE
#
  deploy-infrastructure:
    docker:
      - image: cimg/base:2020.05
    steps:
      - check_job:
          start_job: <<pipeline.parameters.run_deploy_infrastructure>>
      - install_aws
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
            echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check >/dev/null 2>&1 || \
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --short
      - run:
          name: Deploy kubernetes cluster 
          command: |
            export STACKNAME=$CLUSTERNAME 
            ./scripts/deploy_eks.sh  
      - run:
          name: Configure kubectl
          command: |
            aws eks update-kubeconfig --name $CLUSTERNAME
            aws eks describe-cluster --name $CLUSTERNAME
workflows:
  default:
    jobs:
      - build-app:
          pre-steps:
            - cancel-workflow      
          context:
            - org-global
            - aws-context
          filters:
            branches:
              only: master
      - deploy-infrastructure:
          requires:
            - build-app      
          context:
            - org-global
            - aws-context
          filters:
            branches:
              only: release    