# maintainer="Olivier Mbida <oliver.mbida@ai-uavsystems.com>"
version: 2.1

parameters:
  run_build_app:
    type: boolean
    default: true
#   run_deploy_app:
#     type: boolean
#     default: false  

commands:
# Useful if you don't want to re-run deploy-infrastructure which takes a while.
  check_job:
    description: Stop job if false  
    parameters:
      start_job:
        type: boolean
        default: true        
    steps: 
      - when:
          condition: 
            not: << parameters.start_job >>
          steps:
            - run: circleci-agent step halt
# # Similar to [skip ci] or [ci skip] in commit message
  cancel-workflow:
    description: Check commit message if Circleci build
    steps: 
      - checkout
      - run:
          name: Trigger builds if Circleci
          command: |
            commit_message=$(git log -1 HEAD --pretty=format:%s)
            if [[ $commit_message == *Circleci* ]]; then
              echo "---Circleci CI pipeline---"
            else
              echo "Cancelling workflow ${CIRCLE_WORKFLOW_ID}"
              curl --request POST \
                --url https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel \
                --header "Circle-Token: ${CIRCLE_TOKEN_API}"     
            fi
# AWS CLI v2           
# Could use the Orb circleci/aws-cli@3.1.1
# Best to know which commands are executed if you are security aware
# You also reduce the overheads of a generic Orb
  install_aws:
    description: Install the AWS CLI via Pip if not already installed.
    parameters:
      binary-dir:
        default: /usr/local/bin
        description: >
          The main aws program in the install directory is symbolically linked to
          the file aws in the specified path. Defaults to /usr/local/bin
        type: string
      install-dir:
        default: /usr/local/aws-cli
        description: >
          Specify the installation directory of AWS CLI. Defaults to
          /usr/local/aws-cli
        type: string
    steps:
      - run:
          command: |
            curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip" -o "awscliv2.zip"
            unzip -q -o awscliv2.zip
            sudo ./aws/install -i "${PARAM_AWS_CLI_INSTALL_DIR}" -b "${PARAM_AWS_CLI_BINARY_DIR}"
            rm -r awscliv2.zip ./aws
            aws --version
          environment:
            PARAM_AWS_CLI_BINARY_DIR: <<parameters.binary-dir>>
            PARAM_AWS_CLI_INSTALL_DIR: <<parameters.install-dir>>
          name: Install AWS CLI v2
  configure_aws:
    description: >
      configure aws credentials
    parameters:
      access_key_id: 
        type: string
        description: AWS access key Id
        default: $AWS_USER_ACCESS_KEY_ID
      secret_access_key: 
        type: string
        description: AWS secret access key
        default: $AWS_USER_SECRET_ACCESS_KEY
      region: 
        type: string
        description: AWS default region
        default: $AWS_DEFAULT_REGION
    steps: 
      - run:
          name: Configure aws 
          command: |
            # AWS CLI supported environment variables
            AWS_ACCESS_KEY_ID=$(eval echo "$PARAM_AWS_CLI_ACCESS_KEY_ID")
            AWS_SECRET_ACCESS_KEY=$(eval echo "$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
            AWS_DEFAULT_REGION=$(eval echo "$PARAM_AWS_CLI_REGION")
            # configure aws for this job
            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID" 
            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" 
            # cleanup
            unset AWS_ACCESS_KEY_ID
            unset AWS_USER_SECRET_ACCESS_KEY
          environment:
            PARAM_AWS_CLI_ACCESS_KEY_ID: <<parameters.access_key_id>>
            PARAM_AWS_CLI_REGION: <<parameters.region>>
            PARAM_AWS_CLI_SECRET_ACCESS_KEY: <<parameters.secret_access_key>>

# create_changes
# Multi IAM User and roles needed for various steps in creating
# aws infrasturcture.
# Here is where users with different credentials access aws.
# The critical issue is setting up aws cli env variables and config for those iam users when needed.
# AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_DEFAULT_REGION could be set in a restricted context or project level
# but it will create an issue of only allowing one user whose credentials are set at that level.
# Another solution will be to create different profiles/credentials in 
# AWS_CONFIG_FILE~/.aws/config and AWS_SHARED_CREDENTIALS_FILE=~/.aws/credentials then use them here with a shared workspace. 
  create_changes:
    description: Create stack infrasturcture changes 
    parameters:
      access_key_id: 
        type: string
        description: AWS access key Id
        default: $AWS_USER_ACCESS_KEY_ID
      secret_access_key: 
        type: string
        description: AWS secret access key
        default: $AWS_USER_SECRET_ACCESS_KEY
      region: 
        type: string
        description: AWS default region
        default: $AWS_DEFAULT_REGION
      stackname:
        description: Name of top level stack 
        type: string
      workflowID: 
        description: Deployment workflow ID
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
      s3bucket:
        description: Name of S3 bucket to store cloudformation artifacts 
        type: string
        default: $CFN_BUCKET
      changename:
        description: Name of stack change set
        type: string 
      version:
        description: Template version
        type: string 
      capabilities:
        description: IAM user 
        type: string
        default: $AWS_IAM   
      type:
        description: Type of change 
        type: string
        default: UPDATE 
    steps:
      - configure_aws:
          access_key_id: <<parameters.access_key_id>>
          secret_access_key: <<parameters.secret_access_key>>
          region: <<parameters.region>>
      - run:
          name: Upload artifacts to S3 
          working_directory: ./templates
          command: |
            aws cloudformation package --template-file \
              stacks_v<<parameters.version>>.yaml \
              --s3-bucket <<parameters.s3bucket>> \
              --output-template-file stacks_v<<parameters.version>>-packaged.yaml
      - run: 
          name: Wait for local file
          working_directory: ./templates
          command: |
            # Wait for local file
            while [ ! -f "stacks_v<<parameters.version>>-packaged.yaml" ] ; do
              echo "..."
            done        
      - run:
          name: Apply <<parameters.changename>> changes
          working_directory: ./templates
          command: |
            export WORKFLOW_ID=$(eval echo "$PARAM_WORKFLOW_ID")
            change_set_ID=$(aws --output text --query "Id" cloudformation create-change-set \
              --stack-name <<parameters.stackname>> \
              --template-body file://stacks_v<<parameters.version>>-packaged.yaml \
              --parameters ParameterKey=workflowID,ParameterValue="$WORKFLOW_ID" \
              --capabilities <<parameters.capabilities>> \
              --change-set-name <<parameters.changename>> \
              --change-set-type <<parameters.type>> )
          environment: 
            PARAM_WORKFLOW_ID: <<parameters.workflowID>>
      - run:
          name: <<parameters.changename>> Status 
          command: |
            while [ 1 ]   # Endless loop.
            do
                change_Status=$(aws --output text --query "Status" cloudformation describe-change-set \
                    --change-set-name <<parameters.changename>> --stack-name <<parameters.stackname>>)
                echo "Change Status: $change_Status"
                if [[ $change_Status == "CREATE_COMPLETE" ]]; then
                    echo "Exiting change-set status: $change_Status"
                    exit 0
                fi
                sleep 5
            done
      - run:
          name: Ensure <<parameters.changename>>  exist
          command: |
            aws cloudformation execute-change-set --change-set-name <<parameters.changename>> --stack-name <<parameters.stackname>>
      - run:
          name: Creation Status 
          command: |
            while [ 1 ]   # Endless loop.
            do
                stack_Status=$(aws --output text --query "Stacks[0].StackStatus" cloudformation describe-stacks \
                    --stack-name <<parameters.stackname>>)
                echo "Stack Status: $stack_Status"
                if [[ $stack_Status == "CREATE_COMPLETE" || $stack_Status == "UPDATE_COMPLETE"  ]]; then
                    echo "Exiting stack status: $stack_Status"
                    exit 0
                elif [[ $stack_Status == "CREATE_FAILED" || $stack_Status == "ROLLBACK_IN_PROGRESS" || $stack_Status == "ROLLBACK_COMPLETE" || $stack_Status == "UPDATE_ROLLBACK_COMPLETE" || $stack_Status == "DELETE_IN_PROGRESS" ]]; then
                    echo "Exiting stack status: $stack_Status"
                    exit 1
                fi
                sleep 5
            done
      - run:
          name: Cleanup aws config
          command: |
            # cleanup
            rm -f $AWS_SHARED_CREDENTIALS_FILE
            rm -f $AWS_CONFIG_FILE
  security_changes:
    description: Create IAM roles and Security groups 
    parameters:
      access_key_id: 
        type: string
        description: AWS access key Id
        default: $AWS_ADMIN_ACCESS_KEY_ID
      secret_access_key: 
        type: string
        description: AWS secret access key
        default: $AWS_ADMIN_SECRET_ACCESS_KEY
      region: 
        type: string
        description: AWS default region
        default: $AWS_DEFAULT_REGION
      stackname:
        description: Name of top level stack 
        type: string
      workflowID: 
        description: Deployment workflow ID
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
      changename:
        description: Name of stack change set
        type: string 
      type:
        description: Type of change 
        type: string
        default: UPDATE  
      version:
        description: Template version
        type: string 
    steps:     
      - create_changes:
          access_key_id: <<parameters.access_key_id>>
          secret_access_key: <<parameters.secret_access_key>>
          region: <<parameters.region>>
          stackname: <<parameters.stackname>>
          workflowID: <<parameters.workflowID>>
          changename: <<parameters.changename>>
          version: <<parameters.version>>
          type: <<parameters.type>>
# 
jobs:
  # https://circleci.com/docs/building-docker-images          
  build-app:
    # docker:
    #   - image: cimg/base:2020.05  
    # # machine: true
    # resource_class: $CIRCLECI_RESOURCE_CLASS  
    # # docker:
    # #   - image: cimg/base:2020.05 
    machine:
      image: ubuntu-2204:2022.04.2    
    steps:
      # - setup_remote_docker:
      #     version: 20.10.14  
      - check_job:
          start_job: <<pipeline.parameters.run_build_app>>
      # - install_aws
      - configure_aws:
          access_key_id: $AWS_USER_ACCESS_KEY_ID
          secret_access_key: $AWS_USER_SECRET_ACCESS_KEY
      - checkout
      - run:
          name: install dependencies
          command: |
            sudo apt-get update 
            sudo apt install -y jq
            sudo apt-get install -y docker-compose-plugin
            npm install snyk -g
      - run:
          name: install linter
          command: |
            make setup
            make install          
      - run:
          name: run lint
          command: |
            . ~/.devops/bin/activate
            make lint    
      - run:
          name: Build app
          command: |
            # Get dockerhub credentials from aws secretsmanager
            DOCKERHUB_USERNAME=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."username")
            DOCKERHUB_PASSWORD=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."password") 
            printf "%s/%s" "${DOCKERHUB_USERNAME}" "notebook" > /tmp/docker_tag.out
            dockerpath=$(cat /tmp/docker_tag.out)
            echo "Docker ID and Image: $dockerpath"
            docker build --tag "$dockerpath:latest" .
            docker image ls
      - run:
          name: Scan app
          command: |
            # Get dockerhub credentials from aws secretsmanager
            DOCKERHUB_USERNAME=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."username")
            DOCKERHUB_PASSWORD=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."password") 
            echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin 
            dockerpath=$(cat /tmp/docker_tag.out)
            docker scan $dockerpath
      - run:
          name: Test app
          command: |
            docker compose run notebook npm test            
      - run:
          name: Push app to dockerhub
          command: |
            # Get dockerhub credentials from aws secretsmanager
            DOCKERHUB_USERNAME=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."username")
            DOCKERHUB_PASSWORD=$(aws ssm get-parameter \
                --name /aws/reference/secretsmanager/dockerhub \
                --with-decryption --output text --query "Parameter.Value" | jq -r ."password") 
            dockerpath=$(cat /tmp/docker_tag.out)
            echo "Docker ID and Image: $dockerpath"
            echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin 
            docker push "$dockerpath:latest"            
      - run:
          name: Cleanup docker config
          when: on_fail
          command: |
            # WARNING! Your password will be stored unencrypted in ~/.docker/config.json.
            # Rotate dockerhub and AWS ECR credentials
            # To reduce security risk configure docker credential store before login
            # https://docs.docker.com/engine/reference/commandline/login/#credentials-store
            if [ -f ~/.docker/config.json ]; then
              rm -rf ~/.docker/config.json
            fi
      - run:
          name: Cleanup aws config
          when: on_fail
          command: |
            # cleanup
            rm -f $AWS_SHARED_CREDENTIALS_FILE
            rm -f $AWS_CONFIG_FILE
workflows:
  ci-workflow:
    jobs:
      - build-app:
          pre-steps:
            - cancel-workflow      
          context:
            - org-global
            - aws-context
          filters:
            branches:
              only: master
    