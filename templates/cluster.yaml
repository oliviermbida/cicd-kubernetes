AWSTemplateFormatVersion: "2010-09-09"
Description:  "Deploys the EKS cluster"
Metadata:
  Authors:
    Description: Olivier Mbida (olivier.mbida@ai-uavsystems.com)
#  cfn-lint:
#    config:
#      ignore_checks: [E3008]    
#      ignore_reason: ""
Parameters:
  EKSClusterName:
    Type: String
    Description: Name of k8s cluster
    Default: eks-cluster
  Nodes:
    Type: Number
    Description: Number of nodes to create
    Default: 3
  NodesInstanceType:
    Type: String
    Description: EC2 instance type 
    Default: t2.large  
  KeyPairName:
    Type: String
    Description: Existing EC2 key pair 
    Default: udapeople_key  
  Subnet1:
    Description: ID of subnet 1 
    Type: AWS::EC2::Subnet::Id
    Default: subnet-034197e055bbd97cb
  Subnet2:
    Description: ID of subnet 2 
    Type: AWS::EC2::Subnet::Id
    Default: subnet-035991c1b695398cf    
  VpcID:
    Type: String
    Default: vpc-075baffa9194e6d87  
  NodeImageId:
    Description: AMI id determined from the chosen region. 
    Type: AWS::EC2::Image::Id
    Default: ami-028df9f7b798ba67e
Resources:
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EKSClusterName
      Version: "1.23"
      RoleArn: !GetAtt ControlPlaneRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
  ControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for control plane and the worker nodes
      VpcId: !Ref VpcID
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ControlPlaneSecurityGroup"

  ControlPlaneIngressHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodesSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  ControlPlaneEgressToNodes:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing kubelet traffic to nodes
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodesSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
  ControlPlaneEgressHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing HTTPS traffic 
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodesSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  NodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes
      VpcId: !Ref VpcID
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NodesSecurityGroup"
        - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
          Value: "owned"
  NodesIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all traffic from other nodes
      GroupId: !Ref NodesSecurityGroup
      SourceSecurityGroupId: !Ref NodesSecurityGroup
      IpProtocol: "-1"
  NodesIngressControlPlane:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow kubelet traffic from control plane 
      GroupId: !Ref NodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
  NodesIngressControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic from control plane
      GroupId: !Ref NodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  # Nodes (auto-scaling group)
  UnmanagedASG:
    Type: AWS::AutoScaling::AutoScalingGroup  
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
    Properties:
      LaunchConfigurationName: !Ref NodesLaunchConfiguration
      MinSize: !Ref Nodes
      MaxSize: !Ref Nodes
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-UnmanagedASG"
          PropagateAtLaunch: true
        - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
          Value: "owned"
          PropagateAtLaunch: true
  NodesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  ManagedNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: ControlPlane
    Properties:
      ClusterName: !Sub "${AWS::StackName}"
      NodeRole: !GetAtt NodesRole.Arn
      ScalingConfig:
        MinSize:
          Ref: Nodes
        DesiredSize:
          Ref: Nodes
        MaxSize:
          Ref: Nodes
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
  NodesLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref NodesInstanceProfile
      ImageId: !Ref NodeImageId
      InstanceType: !Ref NodesInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref NodesSecurityGroup
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${ControlPlane}
            /opt/aws/bin/cfn-signal \
                            --exit-code $? \
                            --stack  ${AWS::StackName} \
                            --resource UnmanagedASG \
                            --region ${AWS::Region}
            /usr/bin/ping -c 5 google.com 
  NodesInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref NodesRole
